{"version":3,"sources":["components/Filter/index.js","components/PersonForm/index.js","components/Person/index.js","services/phoneNumber/index.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","handleChangeFilter","value","onChange","PersonForm","handleSubmit","handleChangeName","handleChangeNumber","newName","newNumber","onSubmit","type","Person","persons","deletePerson","x","name","toLowerCase","includes","map","person","key","id","number","onClick","baseUrl","axios","get","then","response","data","newObject","post","delete","put","App","useState","setPersons","info","setInfo","setNewName","setNewNumber","setFilter","useEffect","phoneNumberService","className","text","e","target","preventDefault","index","findIndex","window","confirm","pers","setTimeout","catch","concat","slice","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.0fd0fea5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = ({ filter, handleChangeFilter }) => {\r\n  return (\r\n    <div>\r\n      filter shown with <input value={filter} onChange={handleChangeFilter} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nconst PersonForm = ({\r\n  handleSubmit,\r\n  handleChangeName,\r\n  handleChangeNumber,\r\n  newName,\r\n  newNumber,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        name: <input value={newName} onChange={handleChangeName} />\r\n      </div>\r\n      <div>\r\n        number: <input value={newNumber} onChange={handleChangeNumber} />\r\n      </div>\r\n      <div>\r\n        <button type='submit'>add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst Person = ({ persons, filter, deletePerson }) => {\r\n  return (\r\n    <>\r\n      {persons\r\n        .filter((x) => x.name.toLowerCase().includes(filter.toLowerCase()))\r\n        .map((person) => (\r\n          <Fragment key={person.id}>\r\n            <p>\r\n              {person.name} {person.number}\r\n            </p>\r\n            <button onClick={() => deletePerson(person)}>Delete</button>\r\n          </Fragment>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import axios from 'axios';\r\nconst baseUrl = '/api/persons';\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (person, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${person.id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst deletePerson = (person) => {\r\n  const request = axios.delete(`${baseUrl}/${person.id}`);\r\n  return request.then((response) => response);\r\n};\r\n\r\nexport default { getAll, create, deletePerson, update };\r\n","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Person from './components/Person';\nimport phoneNumberService from './services/phoneNumber';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [info, setInfo] = useState(null);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    phoneNumberService.getAll().then((data) => {\n      setPersons(data);\n    });\n  }, []);\n\n  const handleChangeName = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleChangeNumber = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  const handleChangeFilter = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const index = persons.findIndex((x) => x.name === newName);\n\n    if (index !== -1) {\n      const update = window.confirm(\n        `${newName} is already added to phonebook, update?`\n      );\n      if (update) {\n        phoneNumberService\n          .update(persons[index], { name: newName, number: newNumber })\n          .then((data) => {\n            setPersons(\n              persons.map((pers) => {\n                if (pers.id !== data.id) {\n                  return pers;\n                }\n                return data;\n              })\n            );\n            setInfo({ type: 'info', text: `Updated ${data.name}` });\n            setTimeout(() => {\n              setInfo(null);\n            }, 3000);\n          })\n          .catch(() => {\n            setInfo({\n              type: 'error',\n              text: `${newName} was already deleted`,\n            });\n          });\n      }\n    } else {\n      phoneNumberService\n        .create({ name: newName, number: newNumber })\n        .then((data) => {\n          setPersons(persons.concat(data));\n          setInfo({ type: 'info', text: `Added ${data.name}` });\n          setTimeout(() => {\n            setInfo(null);\n          }, 3000);\n        });\n      setNewName('');\n      setNewNumber('');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {info && <div className={info.type}>{info.text}</div>}\n\n      <Filter filter={filter} handleChangeFilter={handleChangeFilter} />\n      <h2>Add a new</h2>\n      <PersonForm\n        handleSubmit={handleSubmit}\n        handleChangeName={handleChangeName}\n        handleChangeNumber={handleChangeNumber}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      <h2>Numbers</h2>\n      <Person\n        persons={persons}\n        filter={filter}\n        deletePerson={(person) => {\n          const deletePerson = window.confirm(`Delete ${person.name} ?`);\n          if (deletePerson) {\n            phoneNumberService.deletePerson(person).then(() => {\n              const index = persons.findIndex((x) => x.id === person.id);\n              setPersons([\n                ...persons.slice(0, index),\n                ...persons.slice(index + 1),\n              ]);\n            });\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}